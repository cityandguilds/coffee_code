---
title: "Environment and secrets"
author: "Stephen J. Price"
format: 
  html:
    self-contained: true
editor: visual
---

## find the place that R lives

```{r}
#| eval: FALSE
R.home()

```

## find the place that Windows allocates as *your* home

Technically, these two things could probably return different paths, but in a C&G setup they're generally equivalent.

```{r}
#| eval: FALSE
Sys.getenv("R_USER")
Sys.getenv("HOME")

```

## where does R look for libraries

```{r}
#| eval: FALSE
.libPaths()

```

## environment variables

We can store stuff in our environment without it showing up in our global environment like this:

```{r}
#| eval: FALSE
Sys.setenv(mysecret = "secret") 
Sys.getenv("mysecret")
```

Compare this to adding something to your global environment.

```{r}
#| eval: FALSE
x <- 1:5

```

Now check out your 'Environment' tab or run `ls()` to see the difference.

```{r}
#| eval: FALSE
ls()
```

```{r}
#| eval: FALSE
x
mysecret
```

Now, you'll have noticed that when I ran `Sys.setenv(mysecret = "secret")`, the (not very secret) secret was printed to my console and to my 'History' pane, and - if my setup is such that I make my history persistent between sessions by storing it in a file (see .RHistory below) - then also written to a file in plain text. Basically, the secret is popping up all over the place!

I can remove some of this loose security by using one of R's 'dot files' that we saw in our home.

### the .Renviron

if we add `mysecret=secret` to our .Renviron and restart R, this variable will always be available in our environment on startup.

A **PLAIN-TEXT** file.

## other dot files that R uses on startup:

### .RHistory

just a log of the commands you run in your console. You can edit your settings so that your history is not backed up to this file but, otherwise, if you enter an environment variable via your console it will be preserved in **PLAIN-TEXT** forever more (or at least until you consciously go and do something about that).

### .Rprofile

We can put some R code in here *but be really cautious about this* (i.e. I never do it!).

e.g. You might decide: I love the tidyverse and I use it every time I use R. I'm just going to get R to load the tidyverse when it starts so I don't have to bother.

So you open your .Rprofile and add a line with `library(tidyverse)`

Before that, `read_csv("data/test.csv")` would have failed in a new session without running `library(tidyverse)` first.

Now it works straight off. Hurray! Productivity win for me!

Except, the day comes when you mention your analysis in a team meeting and a team-mate says, 'Ooh great, I need to do that'. You're chuffed that you can increase the impact of your work and send them your analysis script. Within half an hour they're pinging you on Teams: 'I've got an error when running your script: could not find function "read_csv"'.

You've entered the 'Works on my machine world'ðŸ˜±.

## secure credentials

-   [gitcreds](https://gitcreds.r-lib.org/index.html) for GitHub PATs

-   [keyring](https://keyring.r-lib.org/index.html) for anything else

```{r}
#| eval: FALSE
keyring::keyring_list()

```

```{r}
#| eval: FALSE
keyring::key_set("mysecrets", "my-edw-uid")
keyring::key_set("mysecrets", "silly-eg")
```

```{r}
#| eval: FALSE
keyring::key_get("mysecrets", "silly-eg")
```

```{r}
#| eval: FALSE
DBI::dbConnect(
  uid = keyring::key_get("mysecrets", "my-edw-uid"),
  pwd = keyring::key_get("mysecrets", "silly-eg")
)
```
